#include "mmu.h"
#include "ramregion.h"
#include "upperregion.h"

#define CART_ROM_REGION_START 0
#define CART_RAM_REGION 5
#define VRAM_REGION 4
#define IRAM_REGION 6
#define UPPER_REGION 7

Mmu::Mmu(Cartridge *cart) {
    /* Initialize all of the memory regions. */
    RamRegion *vRam = new RamRegion(0x8000, 0x2000); // 8kB VRAM at 0x8000
    RamRegion *iRam = new RamRegion(0xC000, 0x2000); // 8kB internal RAM at 0xC000
    mIO = new IoRegion();

    /* Upper 8kB contains multiple regions, including IO and echoed iRAM */
    UpperRegion *upper = new UpperRegion(iRam, mIO);


    /* Build out the memory map. We split the map in 8k addressable regions. */

    /* Lower 32K is cartridge fixed/switchable ROM */
    mRegions[CART_ROM_REGION_START] = cart;
    mRegions[CART_ROM_REGION_START+1] = cart;
    mRegions[CART_ROM_REGION_START+2] = cart;
    mRegions[CART_ROM_REGION_START+3] = cart;

    /* Next 8K is vRAM */
    mRegions[VRAM_REGION] = vRam;

    /* Next 8K is switchable cartridge RAM */
    mRegions[CART_RAM_REGION] = cart;

    /* Next 8K is internal RAM */
    mRegions[IRAM_REGION] = iRam;

    /* Upper 8K is special. */
    mRegions[UPPER_REGION] = upper;

}

Mmu::~Mmu() {
    /* Delete each allocated region. */
    delete mRegions[CART_ROM_REGION_START]; // Cartridge (this takes care of cart RAM)
    delete mRegions[VRAM_REGION];
    delete mRegions[IRAM_REGION];
    delete mRegions[UPPER_REGION];
    delete mIO;
}

uint8_t Mmu::readAddr(uint16_t addr) {
    return mRegions[addr >> 13]->readAddr(addr);
}

void Mmu::writeAddr(uint16_t addr, uint8_t val) {
    mRegions[addr >> 13]->writeAddr(addr, val);
}

void Mmu::reset(void) {
    /* TODO: We should probably reset the memory to some value as well. */
    mBootromEnabled = true;
}

const uint8_t Mmu::sBootROM[256] = {
    0x31, 0xfe, 0xff, 0xaf, 0x21, 0xff, 0x9f, 0x32, 0xcb, 0x7c, 0x20, 0xfb, 0x21, 0x26, 0xff, 0x0e,
    0x11, 0x3e, 0x80, 0x32, 0xe2, 0x0c, 0x3e, 0xf3, 0xe2, 0x32, 0x3e, 0x77, 0x77, 0x3e, 0xfc, 0xe0,
    0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1a, 0xcd, 0x95, 0x00, 0xcd, 0x96, 0x00, 0x13, 0x7b,
    0xfe, 0x34, 0x20, 0xf3, 0x11, 0xd8, 0x00, 0x06, 0x08, 0x1a, 0x13, 0x22, 0x23, 0x05, 0x20, 0xf9,
    0x3e, 0x19, 0xea, 0x10, 0x99, 0x21, 0x2f, 0x99, 0x0e, 0x0c, 0x3d, 0x28, 0x08, 0x32, 0x0d, 0x20,
    0xf9, 0x2e, 0x0f, 0x18, 0xf3, 0x67, 0x3e, 0x64, 0x57, 0xe0, 0x42, 0x3e, 0x91, 0xe0, 0x40, 0x04,
    0x1e, 0x02, 0x0e, 0x0c, 0xf0, 0x44, 0xfe, 0x90, 0x20, 0xfa, 0x0d, 0x20, 0xf7, 0x1d, 0x20, 0xf2,
    0x0e, 0x13, 0x24, 0x7c, 0x1e, 0x83, 0xfe, 0x62, 0x28, 0x06, 0x1e, 0xc1, 0xfe, 0x64, 0x20, 0x06,
    0x7b, 0xe2, 0x0c, 0x3e, 0x87, 0xe2, 0xf0, 0x42, 0x90, 0xe0, 0x42, 0x15, 0x20, 0xd2, 0x05, 0x20,
    0x4f, 0x16, 0x20, 0x18, 0xcb, 0x4f, 0x06, 0x04, 0xc5, 0xcb, 0x11, 0x17, 0xc1, 0xcb, 0x11, 0x17,
    0x05, 0x20, 0xf5, 0x22, 0x23, 0x22, 0x23, 0xc9, 0xce, 0xed, 0x66, 0x66, 0xcc, 0x0d, 0x00, 0x0b,
    0x03, 0x73, 0x00, 0x83, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x08, 0x11, 0x1f, 0x88, 0x89, 0x00, 0x0e,
    0xdc, 0xcc, 0x6e, 0xe6, 0xdd, 0xdd, 0xd9, 0x99, 0xbb, 0xbb, 0x67, 0x63, 0x6e, 0x0e, 0xec, 0xcc,
    0xdd, 0xdc, 0x99, 0x9f, 0xbb, 0xb9, 0x33, 0x3e, 0x3c, 0x42, 0xb9, 0xa5, 0xb9, 0xa5, 0x42, 0x3c,
    0x21, 0x04, 0x01, 0x11, 0xa8, 0x00, 0x1a, 0x13, 0xbe, 0x20, 0xfe, 0x23, 0x7d, 0xfe, 0x34, 0x20,
    0xf5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xfb, 0x86, 0x20, 0xfe, 0x3e, 0x01, 0xe0, 0x50,
};
